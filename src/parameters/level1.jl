include("level1/prime.jl")
include("level1/constants.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")

include("../elliptic_curves/dlog.jl")
include("../rii/quat_action.jl")
include("../rii/d2isogeny.jl")
include("../rii/rii.jl")
include("../utilities/for_compression.jl")
include("../sqisign2d/sqisign2d.jl")

StrategyChallenge = compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1)

const StrategiesDim2 = Dict(
    ExponentFull => compute_strategy(ExponentFull-2, 2, 1),
    ExponentFull-1 => compute_strategy(ExponentFull-3, 2, 1),
    ExponentFull-2 => compute_strategy(ExponentFull-4, 2, 1),
    ExponentFull-3 => compute_strategy(ExponentFull-5, 2, 1),
    ExponentFull-4 => compute_strategy(ExponentFull-6, 2, 1),
    ExponentFull-5 => compute_strategy(ExponentFull-7, 2, 1),
    ExponentForTorsion => compute_strategy(ExponentForTorsion-2, 2, 1)
)

function make_precomputed_values()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")

    A0 = Fp2(0)

    # constatns from precompute/level1torsion.sage
    P2e = Point(4395442776859522673668984549172812894446655712794162283404821249969482142618275*Fp2_i + 4757861004587946724988928946715976618193114816772973213942341168908243876124705, 300904592117399173556762935791761524560582323925569360153979733416644009086242*Fp2_i + 344248923617426533162066244613268129928996463320615582454804912688826533723305)
    Q2e = Point(815201238819706120391709776218142958950493597159663098370770030386608691178844*Fp2_i + 452783011091282069071765378674979235204034493180852167833250111447846957672414, 344248923617426533162066244613268129928996463320615582454804912688826533723305*Fp2_i + 4909739423561829620503931389599194328836566986028256021621611546939446824710877)
    M_i_2e = [0 115792089237316195423570985008687907853269984665640564039457584007913129639935; 1 0]
    M_ij_2e = [65179868802411647129259702284228305612648515846238448352796425833983395970710 11301274375072344355696407121468050723396916605560132019116805158006976500851; 11301274375072344355696407121468050723396916605560132019116805158006976500852 50612220434904548294311282724459602240621468819402115686661158173929733669226]
    M_1k_2e = [104490814862243851067874577887219857129873068060080432020340778849906153139085 65179868802411647129259702284228305612648515846238448352796425833983395970710; 65179868802411647129259702284228305612648515846238448352796425833983395970710 11301274375072344355696407121468050723396916605560132019116805158006976500852]
    M44inv = [125054381291225364603498064769413633140 7977536375333053824899576149400928618 7977536375333053824899576149400928618 45086802169243867128189238946470472589; 7977536375333053824899576149400928618 45086802169243867128189238946470472589 45086802169243867128189238946470472588 162163647085136177906787727566483177110; 154186110709803124081888151417082248492 79967579121981497475308825822943160551 79967579121981497475308825822943160551 15955072750666107649799152298801857236; 90173604338487734256378477892940945177 154186110709803124081888151417082248492 154186110709803124081888151417082248492 79967579121981497475308825822943160551]
    P3 = Point(2802598032391756609418235586238415857672824218782509388814779170673971918681094*Fp2_i, 3606827025875162530963507437062327646498555583511112601494560423546305363831075*Fp2_i + 1603816989804066263097186888328628206898593726442712780281030856809785469966044)
    Q3 = Point(3033800057100304780741693365713515615798629743856328031947106011133173883898762*Fp2_i + 1641611964351817841212095333249112326821509200466112328117603811818439197197207, 4326038808667447361495130085559970913587136029165099070936921809472217214716883*Fp2_i + 1710554863112193188308214914472499837971177922524354093468058655164262732077957)
    M_i_3 = [6 7; 5 3]
    M_ij_3 = [6 0; 5 3]
    M_1k_3 = [0 3; 0 1]
    P5 = Point(2833727180045504902945336485455252287470433059665705147207811488763558713032371*Fp2_i, 155569012233432427708432576610412026735613277206773584772202786765664428797884*Fp2_i + 155569012233432427708432576610412026735613277206773584772202786765664428797884)
    Q5 = Point(Fp2(3328913241615999062662024710542537022595218796905914972393763107213571090610732), 910277173804983882651678455049139447948620599484638483835643241903663534580359*Fp2_i)
    M_i_5 = [4 2; 4 1]
    M_ij_5 = [0 1; 0 0]
    M_1k_5 = [1 4; 0 0]

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)

    # precomputed values for discrete logarithm
    window_size = 3
    gen = 1
    while gen^(BigInt(2)^(ExponentFull - 1)) == 1
        gen = rand(Fp2)^((p^2 - 1) >> ExponentFull)
    end
    base = gen^(BigInt(2)^(ExponentFull - SQISIGN_challenge_length))
    fq_dlog_table1_c, fq_dlog_table2_c = make_dlog_table(base, SQISIGN_challenge_length, window_size)
    strategy_dlog_c = compute_strategy(div(SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall = DlogData(SQISIGN_challenge_length, window_size, fq_dlog_table1_c, fq_dlog_table2_c, strategy_dlog_c)
    base = gen^(BigInt(2)^(ExponentFull - ExponentForTorsion))
    fq_dlog_table1_res, fq_dlog_table2_res = make_dlog_table(base, ExponentForTorsion, window_size)
    strategy_dlog_res = compute_strategy(div(ExponentForTorsion, window_size) - 1, window_size, 1)
    dlog_data_res = DlogData(ExponentForTorsion, window_size, fq_dlog_table1_res, fq_dlog_table2_res, strategy_dlog_res)

    DegreesOddTorsionBases = [(3, 2), (5, 1)]
    OddTorsionBases = [[P3, Q3], [P5, Q5]]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = [[M_i_3, M_ij_3, M_1k_3], [M_i_5, M_ij_5, M_1k_5]]

    w = Weil_pairing_2power(A0, P2e, Q2e, ExponentFull)

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    return GlobalData(Fp2, Fp2_i, E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, DegreesOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv, Matrices_odd, w, isomorphism_to_A0, dlog_data_chall, dlog_data_res))
end
