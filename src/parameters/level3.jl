include("level3/prime.jl")
include("level3/constants.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")

include("../elliptic_curves/dlog.jl")
include("../rii/quat_action.jl")
include("../rii/d2isogeny.jl")
include("../rii/rii.jl")
include("../utilities/for_compression.jl")
include("../sqisign2d/sqisign2d.jl")

StrategyChallenge = compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1)

const StrategiesDim2 = Dict(
    ExponentFull => compute_strategy(ExponentFull-2, 2, 1),
    ExponentFull-1 => compute_strategy(ExponentFull-3, 2, 1),
    ExponentFull-2 => compute_strategy(ExponentFull-4, 2, 1),
    ExponentFull-3 => compute_strategy(ExponentFull-5, 2, 1),
    ExponentFull-4 => compute_strategy(ExponentFull-6, 2, 1),
    ExponentFull-5 => compute_strategy(ExponentFull-7, 2, 1),
    ExponentForTorsion => compute_strategy(ExponentForTorsion-2, 2, 1)
)

function make_precomputed_values()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")

    A0 = Fp2(0)

    # constatns from precompute/level3torsion.sage
    P2e = Point(37643248666745528397542294188688194433140933076845923865619851179286140377284849656009349489990218525110524674990737*Fp2_i + 79819882846028414249888426277927425903538604754968184530795641055675789427543984678800959533695651293381605353900242, 24379184963564719464305360026346798567782721050320141644538959271948822489837762991974147001380597404270524274238896*Fp2_i + 39180194432664433329473543893113110977446329121068952495396842457891781774050668293921076428540103854642981646167154)
    Q2e = Point(48548639887867394879318106030375960765470996577297240720517040642501375997865298556459357942570534439153974053805422*Fp2_i + 6372005708584509026971973941136729295073324899174980055341250766111726947606163533667747898865101670882893374895917, 39180194432664433329473543893113110977446329121068952495396842457891781774050668293921076428540103854642981646167154*Fp2_i + 61812703591048203812555040192717356630829208603823022941597932549838693885312385220494560431180155559993974454557263)
    M_i_2e = [0 2462625387274654950767440006258975862817483704404090416746768337765357610718575663213391640930307227550414249394175; 1 0]
    M_ij_2e = [2393389592536604175932137811428150384976646366037307881003408405663125218623026538648933830735314955507760215966934 2393162828844798993117591318465505669633490056527652104766407894030307562153530171417004812756332854301195077562227; 2393162828844798993117591318465505669633490056527652104766407894030307562153530171417004812756332854301195077562228 69235794738050774835302194830825477840837338366782535743359932102232392095549124564457810194992272042654033427242]
    M_1k_2e = [69462558429855957649848687793470193183993647876438311980360443735050048565045491796386828173974373249219171831949 2393389592536604175932137811428150384976646366037307881003408405663125218623026538648933830735314955507760215966934; 2393389592536604175932137811428150384976646366037307881003408405663125218623026538648933830735314955507760215966934 2393162828844798993117591318465505669633490056527652104766407894030307562153530171417004812756332854301195077562228]
    M44inv
    P5 = Point(8529440674300395135312179210846349596359965804954906146309175822035892123595648478616766611944421129464929802134260*Fp2_i + 71286705001672982846078683216454738676691900812581902059486403385955576748828403689090812006022760284796258536284569, 10466227844960956312229516677951379722241450237495881707610851584791270847613839827663852666313641557582159450683934*Fp2_i + 59077212897447700054280594198234468993228427322879728112274340728061701094647210804581981739258497987511753681243918)
    Q5 = Point(Fp2(59798235400310589826022858321931658190691594155693477784134214074601512276311879985967054008509712517195423924459813), 55723439898695623222141218985683273874029830585645838063437574071265943822555157959712795452107137499610925915551377*Fp2_i)
    M_i_5 = [2 3; 0 3]
    M_ij_5 = [4 4; 1 1]
    M_1k_5 = [2 1; 3 4]
    P7 = Point(24613815845802628965822212440294995009388021244593447474779931984689906737181301175980560822689292828106977104717365*Fp2_i + 80693582626137257247871281230687355661187657000057974429234464742239567034756292712528032515390628506750164477688829, 19942788879793717185059743053486954114632635000416578614830365487998389661049116445101284276406964045500862982042874*Fp2_i + 56171464335013112139808648664417808421925079234623360856081920373956430294880848878870167069032489831375359392182412)
    Q7 = Point(71352875305501975002859643366284173246201694949395137151274057541087397826285920817804209069303493982453114142272285*Fp2_i, 70954575107557797535681692366267318981154542794755766841535202764513897342290886088026395366522871446564346810037719*Fp2_i + 70954575107557797535681692366267318981154542794755766841535202764513897342290886088026395366522871446564346810037719)
    M_i_7 = [3 5; 5 4]
    M_ij_7 = [0 0; 4 0]
    M_1k_7 = [0 0; 2 1]

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)

    # precomputed values for discrete logarithm
    tp_table = make_pairing_table(A0, P2e, ExponentFull)
    tp_P2e_Q2e = Tate_pairing_P0(Q2e, tp_table, Cofactor)
    window_size = 3
    fq_dlog_table1, fq_dlog_table2 = make_dlog_table(tp_P2e_Q2e, ExponentFull, window_size)
    strategy_dlog = compute_strategy(div(ExponentFull, window_size) - 1, window_size, 1)
    dlog_data_full = DlogData(ExponentFull, window_size, fq_dlog_table1, fq_dlog_table2, strategy_dlog)
    base = tp_P2e_Q2e^(BigInt(2)^(ExponentFull - SQISIGN_challenge_length))
    fq_dlog_table1_c, fq_dlog_table2_c = make_dlog_table(base, SQISIGN_challenge_length, window_size)
    strategy_dlog_c = compute_strategy(div(SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall = DlogData(SQISIGN_challenge_length, window_size, fq_dlog_table1_c, fq_dlog_table2_c, strategy_dlog_c)
    base = tp_P2e_Q2e^(BigInt(2)^(ExponentFull - ExponentForTorsion))
    fq_dlog_table1_res, fq_dlog_table2_res = make_dlog_table(base, ExponentForTorsion, window_size)
    strategy_dlog_res = compute_strategy(div(ExponentForTorsion, window_size) - 1, window_size, 1)
    dlog_data_res = DlogData(ExponentForTorsion, window_size, fq_dlog_table1_res, fq_dlog_table2_res, strategy_dlog_res)

    DegreesOddTorsionBases = [(5, 1), (7, 1)]
    OddTorsionBases = [[P5, Q5], [P7, Q7]]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = [[M_i_5, M_ij_5, M_1k_5], [M_i_7, M_ij_7, M_1k_7]]

    w = Weil_pairing_2power(A0, P2e, Q2e, ExponentFull)

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    return GlobalData(Fp2, Fp2_i, E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, DegreesOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv, Matrices_odd, w, isomorphism_to_A0, dlog_data_full, dlog_data_chall, dlog_data_res, tp_table))
end
