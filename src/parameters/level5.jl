include("level5/prime.jl")
include("level5/constants.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")

include("../elliptic_curves/dlog.jl")
include("../rii/quat_action.jl")
include("../rii/d2isogeny.jl")
include("../rii/rii.jl")
include("../utilities/for_compression.jl")
include("../sqisign2d/sqisign2d.jl")

StrategyChallenge = compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1)

const StrategiesDim2 = Dict(
    ExponentFull => compute_strategy(ExponentFull-2, 2, 1),
    ExponentFull-1 => compute_strategy(ExponentFull-3, 2, 1),
    ExponentFull-2 => compute_strategy(ExponentFull-4, 2, 1),
    ExponentFull-3 => compute_strategy(ExponentFull-5, 2, 1),
    ExponentFull-4 => compute_strategy(ExponentFull-6, 2, 1),
    ExponentFull-5 => compute_strategy(ExponentFull-7, 2, 1),
    ExponentForTorsion => compute_strategy(ExponentForTorsion-2, 2, 1)
)

function make_precomputed_values()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")

    A0 = Fp2(0)

    # constatns from precompute/level3torsion.sage
    P2e = Point(6299379694212674100484925680161601684215601268625723689817928850823942865021745454223752326458613398241871857823183081392228100264166976240798925596246124104*Fp2_i + 5286096400542644336232677801854397949010376403511048805175822272897612297082300053508297148168115040108780569172076884916401919906458395968546584005872736232, 849313877096116738325381649595713194643606131321741933962061148411355023818563742481502845051378098631766902381570287622980414930658625641923676957739508208*Fp2_i + 3303978383472360672677948381784367414212030982055053254714182188028813972155613780368800602731733140390533546386041953035918416757710043217884343877623518167)
    Q2e = Point(565417965917935614496975118919791533053834031517581719576534608361600318375910597898807314202841156735424453568297776644893887735549667571775102694868933047*Fp2_i + 1578701259587965378749222997226995268259058896632256604218641186287930886315355998614262492493339514868515742219403973120720068093258247844027444285242320919, 3303978383472360672677948381784367414212030982055053254714182188028813972155613780368800602731733140390533546386041953035918416757710043217884343877623518167*Fp2_i + 6015483783034492976656519149485680022625829168821563475432402310774188159579092309641056795610076456345529409009910570414141573069058018170650351333375548943)
    M_i_2e = [0 3432398830065304857490950399540696608634717650071652704697231729592771591698828026061279820330727277488648155695740429018560993999858321906287014145557528575; 1 0]
    M_ij_2e = [2196422708613624446156828465182716577203062467678864542707480374998952142887132412994697719530531187285103194814709788453493726228392986202131458701529919450 204814024445932361781677448729050649863972023684070822954988300567499268555116159844015296842973928360437471100563521760733727369719019988689971379829624883; 204814024445932361781677448729050649863972023684070822954988300567499268555116159844015296842973928360437471100563521760733727369719019988689971379829624884 1235976121451680411334121934357980031431655182392788161989751354593819448811695613066582100800196090203544960881030640565067267771465335704155555444027609126]
    M_1k_2e = [3227584805619372495709272950811645958770745626387581881742243429025272323143711866217264523487753349128210684595176907257827266630139301917597042765727903693 2196422708613624446156828465182716577203062467678864542707480374998952142887132412994697719530531187285103194814709788453493726228392986202131458701529919450; 2196422708613624446156828465182716577203062467678864542707480374998952142887132412994697719530531187285103194814709788453493726228392986202131458701529919450 204814024445932361781677448729050649863972023684070822954988300567499268555116159844015296842973928360437471100563521760733727369719019988689971379829624884]
    M44inv

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)

    # precomputed values for discrete logarithm
    tp_table = make_pairing_table(A0, P2e, ExponentFull)
    tp_P2e_Q2e = Tate_pairing_P0(Q2e, tp_table, Cofactor)
    window_size = 3
    gen = 1
    while gen^(BigInt(2)^(ExponentFull - 1)) == 1
        gen = rand(Fp2)^((p^2 - 1) >> ExponentFull)
    end
    base = gen^(BigInt(2)^(ExponentFull - SQISIGN_challenge_length))
    fq_dlog_table1_c, fq_dlog_table2_c = make_dlog_table(base, SQISIGN_challenge_length, window_size)
    strategy_dlog_c = compute_strategy(div(SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall = DlogData(SQISIGN_challenge_length, window_size, fq_dlog_table1_c, fq_dlog_table2_c, strategy_dlog_c)
    base = gen^(BigInt(2)^(ExponentFull - ExponentForTorsion))
    fq_dlog_table1_res, fq_dlog_table2_res = make_dlog_table(base, ExponentForTorsion, window_size)
    strategy_dlog_res = compute_strategy(div(ExponentForTorsion, window_size) - 1, window_size, 1)
    dlog_data_res = DlogData(ExponentForTorsion, window_size, fq_dlog_table1_res, fq_dlog_table2_res, strategy_dlog_res)

    DegreesOddTorsionBases = Tuple{Int, Int}[]
    OddTorsionBases = Vector{Proj1{FqFieldElem}}[]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = Vector{Matrix{Int}}[]

    w = Weil_pairing_2power(A0, P2e, Q2e, ExponentFull)

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    return GlobalData(Fp2, Fp2_i, E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, DegreesOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv, Matrices_odd, w, isomorphism_to_A0, dlog_data_chall, dlog_data_res, tp_table))
end
