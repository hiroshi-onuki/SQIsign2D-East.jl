include("level5/prime.jl")
include("level5/constants.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")

include("../elliptic_curves/dlog.jl")
include("../rii/quat_action.jl")
include("../rii/d2isogeny.jl")
include("../rii/rii.jl")
include("../utilities/for_compression.jl")
include("../sqisign2d/sqisign2d.jl")

StrategyChallenge = compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1)

const StrategiesDim2 = Dict(
    ExponentFull => compute_strategy(ExponentFull-2, 2, 1),
    ExponentFull-1 => compute_strategy(ExponentFull-3, 2, 1),
    ExponentFull-2 => compute_strategy(ExponentFull-4, 2, 1),
    ExponentFull-3 => compute_strategy(ExponentFull-5, 2, 1),
    ExponentFull-4 => compute_strategy(ExponentFull-6, 2, 1),
    ExponentFull-5 => compute_strategy(ExponentFull-7, 2, 1),
    ExponentForTorsion => compute_strategy(ExponentForTorsion-2, 2, 1)
)

function make_precomputed_values()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")

    A0 = Fp2(0)

    # constatns from precompute/level5torsion.txt
    P2e = Point(18302320489909996282154034939280715955570454316505076260264685061057326601386297163393731278911210848657850837925513685331018506300983446089138343156791024*Fp2_i + 57249034695053785717713598219555220025492568391010361477831793163818080687341015729158599305568081183638119969849804562396613302172894000071789294556624088, 26676568305708022426546686074073653832796328309790969368504748705786492545576818862305490146380318589124521942455269482283556898284068844199454398690884782*Fp2_i + 2190298352697736358044199732261526821705602135495735081712422641347203832425929856148707114447993636367528809554777503262432299137868576953097840724441040)
    Q2e = Point(45803761175128046100184272083390985841440263513202304576976093091737357667402849319440230209199296164985113984028622745313492245893636091467247541153548559*Fp2_i + 6857046969984256664624708803116481771518149438697019359408984988976603581448130753675362182542425830004844852104331868247897450021725537484596589753715495, 2190298352697736358044199732261526821705602135495735081712422641347203832425929856148707114447993636367528809554777503262432299137868576953097840724441040*Fp2_i + 37429513359330019955791620948598047964214389519916411468736029447008191723212327620528471341730188424518442879498866948360953853910550693356931485619454801)
    M_i_2e = [0 418993997810706159361688281193932691483730181893512293053861295116305125939798343025058571817715732115313495568327689089179808837873330310826051531440127; 1 0]
    M_ij_2e = [6747525104193852686135918272741552797156896930749137869895333287148071323500135634615869814124668301879063270507987542612408220500056334934394148927624 283481302033617608470178145401932631507499713461363991576821448543340793153147098339482847926774053332588400521989834584312333839523697273954655754266560; 283481302033617608470178145401932631507499713461363991576821448543340793153147098339482847926774053332588400521989834584312333839523697273954655754266561 412246472706512306675552362921191138686573284962763155183965961829157054616298207390442702003591063813434432297819701546567400617373273975891657382512504]
    M_1k_2e = [135512695777088550891510135792000059976230468432148301477039846572964332786651244685575723890941678782725095046337854504867474998349633036871395777173568 6747525104193852686135918272741552797156896930749137869895333287148071323500135634615869814124668301879063270507987542612408220500056334934394148927624; 6747525104193852686135918272741552797156896930749137869895333287148071323500135634615869814124668301879063270507987542612408220500056334934394148927624 283481302033617608470178145401932631507499713461363991576821448543340793153147098339482847926774053332588400521989834584312333839523697273954655754266561]
    M44inv
    P3 = Point(41306225252471597458244018661365202023355981189909055009627648805376737275281329132524828674186839858295283368764938138165422895579359700713912874902950362*Fp2_i + 8308592457860274344064109443742841092906092395331953083534646572729062152068963970896803743082605545764659230308390109810895455525474646561538936506006451, 46194990604722498456281101492238716056873724579069191766296715326987270916658409354890369895685482420696376388554491495092447809570977602433270515584627964*Fp2_i + 53741914865584723705690217360658781227829619416561347081782492909325637447500970835330376437477997364822502013430290049580995790582414682027092408032720709)
    Q3 = Point(56632232569407217195205068232008785238104448090394561621863905439526623318856127320027452063491801920982915085934511461487899408746961483814055307926481511*Fp2_i + 25457980490184445325959052831245802826833236152619943858181641592885143365402954168322434150892377119796398840793928570053455735419324650409110557123574523, 13505166351331113835958068319706934888986457716691814366566005836676702915939001615407004798994622743974562513085744545653209019271898004447248065094618033*Fp2_i + 53402804885930086057819335869506648931796886226972247427667857842252974875843967728644579235572680102119357976386647731902456589643155642564161467297378680)
    M_i_3 = [8 2; 8 1]
    M_ij_3 = [2 2; 7 7]
    M_1k_3 = [4 3; 5 6]
    P17 = Point(3785134439815256539703766725000888917791719643487659611285418718435033555885255374746863142857233015079887243722614238569769784774040628845683712882632326*Fp2_i + 55619525173779554263881978863892794641809422607840663660484105100191556772224630731336729440859989772985883996404288892788936662524571440338117773246112142, 40514953752717529419094071346559088159308037378761573225338317602230230486782874896183326088281414013309373833525093719424361120031954434165996193032190976*Fp2_i + 25695776953728604513379065790701009566913962338030110789851888945742750621415527996971048687926008772713755345743323200649090023367371316095011658552491603)
    Q17 = Point(20068374304229246576965725657062636060783244127464073182358908705384169440301222023528356846059378537523112611011668770408796358551844174815685485425246808*Fp2_i + 3395129363280568759354608265358344016198567282146912108449105871465777174083199990219571343661571891203294224561422000122183153030816557758348976775780434, 13253940852356392372634968920890838334849044952852686642553320990078902575365114899307241971084022668973595634909462350169571728437001743726549321725934159*Fp2_i + 27998179244892275750974876199069882271137117595959514688546327259054997543806462459740699934849909942054728952817269521101433627175148974898196450263863873)
    M_i_17 = [13 0; 16 4]
    M_ij_17 = [8 5; 11 9]
    M_1k_17 = [3 14; 2 15]

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)

    # precomputed values for discrete logarithm
    window_size = 3
    gen = 1
    while gen^(BigInt(2)^(ExponentFull - 1)) == 1
        gen = rand(Fp2)^((p^2 - 1) >> ExponentFull)
    end
    base = gen^(BigInt(2)^(ExponentFull - SQISIGN_challenge_length))
    fq_dlog_table1_c, fq_dlog_table2_c = make_dlog_table(base, SQISIGN_challenge_length, window_size)
    strategy_dlog_c = compute_strategy(div(SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall = DlogData(SQISIGN_challenge_length, window_size, fq_dlog_table1_c, fq_dlog_table2_c, strategy_dlog_c)
    base = gen^(BigInt(2)^(ExponentFull - ExponentForTorsion))
    fq_dlog_table1_res, fq_dlog_table2_res = make_dlog_table(base, ExponentForTorsion, window_size)
    strategy_dlog_res = compute_strategy(div(ExponentForTorsion, window_size) - 1, window_size, 1)
    dlog_data_res = DlogData(ExponentForTorsion, window_size, fq_dlog_table1_res, fq_dlog_table2_res, strategy_dlog_res)

    DegreesOddTorsionBases = Tuple{Int, Int}[(3, 2), (17, 1)]
    OddTorsionBases = [[P3, Q3], [P17, Q17]]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = Vector{Matrix{Int}}[[M_i_3, M_ij_3, M_1k_3], [M_i_17, M_ij_17, M_1k_17]]

    w = Weil_pairing_2power(A0, P2e, Q2e, ExponentFull)

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    return GlobalData(Fp2, Fp2_i, E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, DegreesOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv, Matrices_odd, w, isomorphism_to_A0, dlog_data_chall, dlog_data_res))
end
